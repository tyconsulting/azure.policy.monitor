name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - 'README.md'
    - 'tests/*'
pr:
  branches:
    include:
      - master
      - feature/*
  paths:
    exclude:
    - 'README.md'
    - 'tests/*'
stages:
- stage: test_and_build
  displayName: 'Test and Build'
  variables:
  - group: variables - dev
  jobs:
  - job: lint_tests
    displayName: Lint Tests
    pool:
      vmImage: ubuntu-latest
    steps:
    - script: |
        docker pull github/super-linter:latest
        docker run -e RUN_LOCAL=true -v $(System.DefaultWorkingDirectory)/management:/tmp/lint github/super-linter
      displayName: 'Code Scan using GitHub Super-Linter'
  - job: Bicep_Validation
    displayName: ARM Deployment Validation
    dependsOn: lint_tests
    pool:
      vmImage: windows-latest
    steps:
    - task: AzurePowerShell@5
      displayName: 'Get management subscription Id'
      inputs:
        azureSubscription: 'sub-mgmt-dev'
        ScriptType: InlineScript
        Inline: |
          $subId = (get-azcontext).subscription.id
          Write-Output ("##vso[task.setvariable variable=mgmtSubId]$subId")
        azurePowerShellVersion: LatestVersion
    - task: AzureCLI@2
      displayName: 'Template Validation - Function App'
      inputs:
        azureSubscription: 'sub-mgmt-dev'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group validate --resource-group $(resourceGroupName) --template-file 'templates/function-app/main.bicep' --parameters logAnalyticsWorkspaceResourceId='$(logAnalyticsWorkspaceResourceId)' appInsightsName='$(appInsightsName)' appServicePlanName='$(appServicePlanName)' appServicePlanSku='$(appServicePlanSku)' functionAppName='$(functionAppName)' keyVaultName='$(keyVaultName)' keyVaultSku='$(keyVaultSku)' storageAccountName='$(storageAccountName)' storageSku='$(storageSku)' --location $(location)
    - task: AzureCLI@2
      displayName: 'Get Function App Template Deployment What-If Result'
      inputs:
        azureSubscription: 'sub-mgmt-dev'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group what-if --resource-group $(resourceGroupName) --template-file 'templates/function-app/main.bicep' --parameters logAnalyticsWorkspaceResourceId='$(logAnalyticsWorkspaceResourceId)' appInsightsName='$(appInsightsName)' appServicePlanName='$(appServicePlanName)' appServicePlanSku='$(appServicePlanSku)' functionAppName='$(functionAppName)' keyVaultName='$(keyVaultName)' keyVaultSku='$(keyVaultSku)' storageAccountName='$(storageAccountName)' storageSku='$(storageSku)' --location $(location)
    - task: AzureCLI@2
      displayName: 'Template Validation - Event Grid'
      inputs:
        azureSubscription: 'sub-mgmt-dev'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group validate --resource-group $(resourceGroupName) --template-file 'templates/event-grid/main.bicep' --parameters eventGridSubName='$(eventGridSubName)' topicName='$(topicName)' --location '$(location)'
    - task: AzureCLI@2
      displayName: 'Get Event Grid Template Deployment What-If Result'
      inputs:
        azureSubscription: 'sub-mgmt-dev'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group what-if --resource-group $(resourceGroupName) --template-file 'templates/event-grid/main.bicep' ---location '$(location)' --result-format 'FullResourcePayloads'
  - job: Publish_Pattern
    displayName: Publish Pattern
    pool:
      vmImage: ubuntu-latest
    dependsOn: Bicep_Validation
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        CleanTargetFolder: true
        OverWrite: true
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        artifactName: 'PolicyMonitor'
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
- stage: dev_deploy
  displayName: 'Deploy Dev Stage'
  jobs:
    - deployment: dev_deploy
      variables:
      - group: variables - dev
      - name: azureServiceConnection
        value: 'sub-mgmt-dev'
      displayName: 'Deploy to Function App to Dev Managmenet Subscription'
      pool:
        vmImage: ubuntu-latest
        timeoutInMinutes: 120
      environment: 'dev'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureCLI@2
                displayName: 'Deploy Function App'
                inputs:
                  azureSubscription: '$(azureServiceConnection)'
                  scriptType: bash
                  scriptLocation: inlineScript
                  inlineScript: |
                    az --version
                    az group create --name $(resourceGroupName) --location $(location)
                    az deployment group create --resource-group $(resourceGroupName) --template-file $(Agent.BuildDirectory)/templates/functioin-app/main.bicep --parameters logAnalyticsWorkspaceResourceId='$(logAnalyticsWorkspaceResourceId)' appInsightsName='$(appInsightsName)' appServicePlanName='$(appServicePlanName)' appServicePlanSku='$(appServicePlanSku)' functionAppName='$(functionAppName)' keyVaultName='$(keyVaultName)' keyVaultSku='$(keyVaultSku)' storageAccountName='$(storageAccountName)' storageSku='$(storageSku)' --location $(location)
- stage: prod_deploy
  displayName: 'Deploy Prod Stage'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
  jobs:
    - deployment: prod_deploy
      variables:
      - group: variables - mgmt (prod)
      displayName: 'Deploy to Prod'
      pool:
        vmImage: windows-latest
        timeoutInMinutes: 120
      timeoutInMinutes: 120
      environment: 'prod'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureResourceManagerTemplateDeployment@3
              displayName: 'Template Deployment - Prod'
              inputs:
                deploymentScope: Subscription
                azureResourceManagerConnection: 'sub-mgmt-prod'
                subscriptionId: '$(mgmtSubId)'
                location: '$(location)'
                csmFile: $(Agent.BuildDirectory)/management/template/azuredeploy.json
                overrideParameters: '-logAnalyticsWorkspaceResourceId $(logAnalyticsWorkspaceResourceId)'
                deploymentMode: Incremental
